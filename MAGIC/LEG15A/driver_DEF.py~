#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on 10 January 2022

@author: Maike Ahlgrimm

Modification

"""

## MAGIC Leg15 case definition, based on ship-following
## SCM forcing. Original ship-following LES forcing
## derived by Jeremy McGibbon and Chris Bretherton
## (JAMES 2017), adapted for SCM use by M Ahlgrimm

import os
import sys
sys.path = ['../../utils/',] + sys.path

import netCDF4 as nc
from netCDF4 import Dataset
import numpy as np

from datetime import datetime, timedelta

#import constants
from Case import Case
import xarray as xr


def ___convert_to_datetime(d):
#    ss=len(d)
  return datetime.strptime(np.datetime_as_string(d,unit='s'), '%Y-%m-%dT%H:%M:%S')



def ___convert_to_ts(d):
  return datetime.strptime(np.datetime_as_string(d,unit='s'), '%Y-%m-%dT%H:%M:%S').timestamp()


################################################
# 0. General configuration of the present script
################################################

lplot = True # plot all the variables
lverbose = False # print information about variables and case

################################################
# 1. General information about the case
################################################

case = Case('MAGIC/LEG15A',
        startDate="20130720130000",
        endDate="20130725040000",
        surfaceType='ocean',
        zorog=0.)

case.set_title("Forcing and initial conditions for ship-following MAGIC LEG15A case")
case.set_reference("J. McGibbon, C. Bretherton (JAMES 2017)")
case.set_author("M. Ahlgrimm")
case.set_script("DEPHY-SCM/MAGIC/LEG15A/driver_DEF.py")

# radiosonde profiles
snd=xr.open_dataset('../aux/15A/15A_snd.nc')
# large-scale forcing derived from IFS model data
lsf=xr.open_dataset('../aux/15A/15A_lsf.nc')
# SST
sfc=xr.open_dataset('../aux/15A/15A_sfc.nc')

################################################
# 2. Initial state
################################################


sndtime=snd.time #minutes since 2013-07-20 17:29:00
lsftime=lsf.time #hours   since 2013-07-20 13:00:00
newlsftime=np.zeros(len(lsftime))
newtime=___convert_to_datetime(lsftime)
print(newtime)
basetime=datetime(2013,7,20,13)
print(basetime)
delta=lsftime-basetime
print(delta.total_seconds())
sfctime=sfc.time #minutes since 2013-07-20 13:15:00
#print(sndtime)
#print(lsftime.timestamp())
#print(sfctime)

# Model-derived forcing is available from 13UTC, but
# the initial profile from sonde only at 17:30UTC.
# The case should start at 17:30

#Initial profiles from sonde
zsnd=snd.z.values
qsnd=snd.q[0,:].values/1000.   #kg/kg
psnd=snd.p[0,:].values*100.    #Pa
usnd=snd.u[0,:].values         #m/s
vsnd=snd.v[0,:].values         #m/s
tsnd=snd.T[0,:].values         #K
thetasnd=snd.theta[0,:].values #K
rhsnd=snd.RH[0,:].values       #1


# Winds
case.add_init_wind(u=usnd, v=vsnd, lev=zsnd, levtype='altitude')

# Temperature
case.add_init_temp(tsnd, lev=zsnd, levtype='altitude')

# Potential temperature
case.add_init_theta(thetasnd, lev=zsnd, levtype='altitude')

# Water vapor mixing ratio
case.add_init_rv(qsnd, lev=zsnd, levtype='altitude')

# Pressure
case.add_init_pressure(psnd,lev=zsnd, levtype='altitude')

# Initial state from surface file
sst0 = sfc.sst[0].values
case.add_init_ts(sst0)

# Initial state from large scale forcing

# Surface pressure
ps0 = lsf.p_surf[4].values
case.add_init_ps(ps0)

################################################
# 3. Forcing
################################################

# Model-field-derived large-scale forcing
# Based on 0.5deg lat/lon gridded ECMWF data
# A smoothing (Gaussian kernel with standard
# deviation of 2deg) was applied to the model
# fields

# height on model levels (hybrid pressure coordinate,
# varying in time)
zlsf=lsf.z.values

lat = lsf.lat.values
lon = lsf.lon.values

case.add_latitude(lat,time=lsftime)
case.add_longitude(lon,time=lsftime)

#  Geostrophic wind
ug=lsf.u_geo.values
vg=lsf.v_geo.values
#case.add_geostrophic_wind(ug=ug,vg=vg,lev=zlsf,time=lsftime[5:-1],levtype='altitude')

# large-scale horizontal advective tendencies
t_adv  = lsf.tls #K/s
rv_adv = lsf.qls #kg/kg/s
case.add_rv_advection(rv_adv,time=lsftime,lev=zlsf[-1,:],height=zlsf,levtype='altitude')
case.add_temp_advection(t_adv,time=lsftime,lev=zlsf[-1,:],height=zlsf,levtype='altitude',include_rad=False)

# Pressure levels 
plsf=lsf.p
case.add_pressure_forcing(plsf,time=lsftime,lev=zlsf[-1,:],height=zlsf,levtype='altitude')

# Surface pressure
ps=lsf.p_surf*100. #Pa
case.add_surface_pressure_forcing(ps,time=lsftime)

# Large-scale vertical velocity
w=lsf.wls #m/s
case.add_vertical_velocity(w=w,lev=zlsf[-1,:],height=zlsf,time=lsftime,levtype='altitude')

# Large-scale state - model derived
ulsf=lsf.u.values #m/s
vlsf=lsf.v.values #m/s
qlsf=lsf.q.values #kg/kg
tlsf=lsf.T.values #k

# Atmospheric state from sonde
zsnd=snd.z.values         #m
qsnd=snd.q.values/1000.   #kg/kg
psnd=snd.p.values*100.    #Pa
usnd=snd.u.values         #m/s
vsnd=snd.v.values         #m/s
tsnd=snd.T.values         #K
thetasnd=snd.theta.values #K
rhsnd=snd.RH.values       #1

#case.add_wind_nudging(unudg=unudg,vnudg=vnudg,timescale=3600.*3.,p_nudging=110000.,time=timeForc,timeid='time',lev=levForc,levtype='pressure',levid='lev')
case.add_temp_nudging(tsnd,timescale=3600.*3.,z_nudging=0.,time=sndtime,timeid='time',lev=zsnd,levtype='altitude')
case.add_qv_nudging(qsnd,timescale=3600.*3.,p_nudging=0.,time=sndtime,timeid='time',lev=zsnd,levtype='altitude')

# Surface Forcing
sst     = sfc.sst #K
case.add_forcing_ts(sst, time=sfctime)

################################################
# 4. Writing file
################################################

case.write('MAGIC_LEG15A_DEF_driver.nc')

if lverbose:
    case.info()

################################################
# 5. Ploting, if asked
################################################

if lplot:
    case.plot(rep_images='./images/driver_DEF/',timeunits='hours')
